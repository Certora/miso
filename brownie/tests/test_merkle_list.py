import pytest
from brownie import accounts, reverts
from settings import *

# reset the chain after every test case
@pytest.fixture(autouse=True)
def isolation(fn_isolation):
    pass

def test_merkle_list(merkle_list):
    print(accounts[0].address)
    merkle_root = "0x1111111111111111111111111111111111111111111111111111111111111111"
    tx = merkle_list.setMerkleRoot(merkle_root, {"from": accounts[0]})
    assert "MerkleRootUpdated" in tx.events

def test_init_twice(merkle_list):
    with reverts("Already initialised"):
        merkle_list.initMerkleList(accounts[0], {"from": accounts[0]})

def test_set_merkle_root(merkle_list):
    merkle_root = "0x1111111111111111111111111111111111111111111111111111111111111111"
    
    tx = merkle_list.setMerkleRoot(merkle_root, {"from": accounts[0]})
    assert "MerkleRootUpdated" in tx.events
    assert merkle_list.merkleRoot() == merkle_root

def test_set_merkle_root_not_operator(merkle_list):
    merkle_root = "0x1111111111111111111111111111111111111111111111111111111111111111"
    with reverts("MerkleList.setMerkleRoot: Sender must be operator"):
        merkle_list.setMerkleRoot(merkle_root, {"from": accounts[5]})

def test_get_points(merkle_list):
    validEntry = "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021af81b73f375d94d9cfdc9292043e0760d8d32108039b2df71f3f74f0cf91071ddccc4667e91de20df22e144881be79f4f86c621969c9a8500d82f618df31144"
    assert merkle_list.points(accounts[0], validEntry) == 100
    
    invalidEntry = "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021af81b73f375d94d9cfdc9292043e0760d8d32108039b2df71f3f74f0cf91071ddccc4667e91de20df22e144881be79f4f86c621969c9a8500d82f618df31146"
    assert merkle_list.points(accounts[3], invalidEntry) == 0 # invalid data

def test_has_points(merkle_list):
    # has 100 points
    validEntry = "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021af81b73f375d94d9cfdc9292043e0760d8d32108039b2df71f3f74f0cf91071ddccc4667e91de20df22e144881be79f4f86c621969c9a8500d82f618df31144"
    assert merkle_list.hasPoints(accounts[0], 1, validEntry) == True
    assert merkle_list.hasPoints(accounts[0], 100, validEntry) == True
    assert merkle_list.hasPoints(accounts[0], 200, validEntry) == False

    invalidEntry = "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021af81b73f375d94d9cfdc9292043e0760d8d32108039b2df71f3f74f0cf91071ddccc4667e91de20df22e144881be79f4f86c621969c9a8500d82f618df31146"
    assert merkle_list.hasPoints(accounts[3], 1, invalidEntry) == False